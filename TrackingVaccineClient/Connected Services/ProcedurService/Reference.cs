//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TrackingVaccineClient.ProcedurService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Vaccine", Namespace="http://schemas.datacontract.org/2004/07/TrackingVaccineService")]
    [System.SerializableAttribute()]
    public partial class Vaccine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string codeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> registered_dateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string registered_numberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> statusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string code {
            get {
                return this.codeField;
            }
            set {
                if ((object.ReferenceEquals(this.codeField, value) != true)) {
                    this.codeField = value;
                    this.RaisePropertyChanged("code");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> registered_date {
            get {
                return this.registered_dateField;
            }
            set {
                if ((this.registered_dateField.Equals(value) != true)) {
                    this.registered_dateField = value;
                    this.RaisePropertyChanged("registered_date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string registered_number {
            get {
                return this.registered_numberField;
            }
            set {
                if ((object.ReferenceEquals(this.registered_numberField, value) != true)) {
                    this.registered_numberField = value;
                    this.RaisePropertyChanged("registered_number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> status {
            get {
                return this.statusField;
            }
            set {
                if ((this.statusField.Equals(value) != true)) {
                    this.statusField = value;
                    this.RaisePropertyChanged("status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VaccineUsage", Namespace="http://schemas.datacontract.org/2004/07/TrackingVaccineService")]
    [System.SerializableAttribute()]
    public partial class VaccineUsage : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string resident_nikField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> used_atField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string vaccine_codeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string resident_nik {
            get {
                return this.resident_nikField;
            }
            set {
                if ((object.ReferenceEquals(this.resident_nikField, value) != true)) {
                    this.resident_nikField = value;
                    this.RaisePropertyChanged("resident_nik");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> used_at {
            get {
                return this.used_atField;
            }
            set {
                if ((this.used_atField.Equals(value) != true)) {
                    this.used_atField = value;
                    this.RaisePropertyChanged("used_at");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string vaccine_code {
            get {
                return this.vaccine_codeField;
            }
            set {
                if ((object.ReferenceEquals(this.vaccine_codeField, value) != true)) {
                    this.vaccine_codeField = value;
                    this.RaisePropertyChanged("vaccine_code");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ProcedurService.IProcedurService")]
    public interface IProcedurService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetVaccines", ReplyAction="http://tempuri.org/IProcedurService/GetVaccinesResponse")]
        TrackingVaccineClient.ProcedurService.Vaccine[] GetVaccines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetVaccines", ReplyAction="http://tempuri.org/IProcedurService/GetVaccinesResponse")]
        System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.Vaccine[]> GetVaccinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetRegisteredVaccines", ReplyAction="http://tempuri.org/IProcedurService/GetRegisteredVaccinesResponse")]
        TrackingVaccineClient.ProcedurService.Vaccine[] GetRegisteredVaccines();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetRegisteredVaccines", ReplyAction="http://tempuri.org/IProcedurService/GetRegisteredVaccinesResponse")]
        System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.Vaccine[]> GetRegisteredVaccinesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetRegisteredVaccinesUsage", ReplyAction="http://tempuri.org/IProcedurService/GetRegisteredVaccinesUsageResponse")]
        TrackingVaccineClient.ProcedurService.VaccineUsage[] GetRegisteredVaccinesUsage();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetRegisteredVaccinesUsage", ReplyAction="http://tempuri.org/IProcedurService/GetRegisteredVaccinesUsageResponse")]
        System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.VaccineUsage[]> GetRegisteredVaccinesUsageAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetVaccine", ReplyAction="http://tempuri.org/IProcedurService/GetVaccineResponse")]
        TrackingVaccineClient.ProcedurService.Vaccine GetVaccine(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/GetVaccine", ReplyAction="http://tempuri.org/IProcedurService/GetVaccineResponse")]
        System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.Vaccine> GetVaccineAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/ValidateRegisteredVaccine", ReplyAction="http://tempuri.org/IProcedurService/ValidateRegisteredVaccineResponse")]
        bool ValidateRegisteredVaccine(string registered_number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/ValidateRegisteredVaccine", ReplyAction="http://tempuri.org/IProcedurService/ValidateRegisteredVaccineResponse")]
        System.Threading.Tasks.Task<bool> ValidateRegisteredVaccineAsync(string registered_number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/create", ReplyAction="http://tempuri.org/IProcedurService/createResponse")]
        bool create(TrackingVaccineClient.ProcedurService.Vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/create", ReplyAction="http://tempuri.org/IProcedurService/createResponse")]
        System.Threading.Tasks.Task<bool> createAsync(TrackingVaccineClient.ProcedurService.Vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/update", ReplyAction="http://tempuri.org/IProcedurService/updateResponse")]
        bool update(TrackingVaccineClient.ProcedurService.Vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/update", ReplyAction="http://tempuri.org/IProcedurService/updateResponse")]
        System.Threading.Tasks.Task<bool> updateAsync(TrackingVaccineClient.ProcedurService.Vaccine vaccine);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/delete", ReplyAction="http://tempuri.org/IProcedurService/deleteResponse")]
        bool delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/delete", ReplyAction="http://tempuri.org/IProcedurService/deleteResponse")]
        System.Threading.Tasks.Task<bool> deleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/send", ReplyAction="http://tempuri.org/IProcedurService/sendResponse")]
        bool send(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcedurService/send", ReplyAction="http://tempuri.org/IProcedurService/sendResponse")]
        System.Threading.Tasks.Task<bool> sendAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProcedurServiceChannel : TrackingVaccineClient.ProcedurService.IProcedurService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcedurServiceClient : System.ServiceModel.ClientBase<TrackingVaccineClient.ProcedurService.IProcedurService>, TrackingVaccineClient.ProcedurService.IProcedurService {
        
        public ProcedurServiceClient() {
        }
        
        public ProcedurServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcedurServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcedurServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcedurServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public TrackingVaccineClient.ProcedurService.Vaccine[] GetVaccines() {
            return base.Channel.GetVaccines();
        }
        
        public System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.Vaccine[]> GetVaccinesAsync() {
            return base.Channel.GetVaccinesAsync();
        }
        
        public TrackingVaccineClient.ProcedurService.Vaccine[] GetRegisteredVaccines() {
            return base.Channel.GetRegisteredVaccines();
        }
        
        public System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.Vaccine[]> GetRegisteredVaccinesAsync() {
            return base.Channel.GetRegisteredVaccinesAsync();
        }
        
        public TrackingVaccineClient.ProcedurService.VaccineUsage[] GetRegisteredVaccinesUsage() {
            return base.Channel.GetRegisteredVaccinesUsage();
        }
        
        public System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.VaccineUsage[]> GetRegisteredVaccinesUsageAsync() {
            return base.Channel.GetRegisteredVaccinesUsageAsync();
        }
        
        public TrackingVaccineClient.ProcedurService.Vaccine GetVaccine(int id) {
            return base.Channel.GetVaccine(id);
        }
        
        public System.Threading.Tasks.Task<TrackingVaccineClient.ProcedurService.Vaccine> GetVaccineAsync(int id) {
            return base.Channel.GetVaccineAsync(id);
        }
        
        public bool ValidateRegisteredVaccine(string registered_number) {
            return base.Channel.ValidateRegisteredVaccine(registered_number);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateRegisteredVaccineAsync(string registered_number) {
            return base.Channel.ValidateRegisteredVaccineAsync(registered_number);
        }
        
        public bool create(TrackingVaccineClient.ProcedurService.Vaccine vaccine) {
            return base.Channel.create(vaccine);
        }
        
        public System.Threading.Tasks.Task<bool> createAsync(TrackingVaccineClient.ProcedurService.Vaccine vaccine) {
            return base.Channel.createAsync(vaccine);
        }
        
        public bool update(TrackingVaccineClient.ProcedurService.Vaccine vaccine) {
            return base.Channel.update(vaccine);
        }
        
        public System.Threading.Tasks.Task<bool> updateAsync(TrackingVaccineClient.ProcedurService.Vaccine vaccine) {
            return base.Channel.updateAsync(vaccine);
        }
        
        public bool delete(int id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<bool> deleteAsync(int id) {
            return base.Channel.deleteAsync(id);
        }
        
        public bool send(int id) {
            return base.Channel.send(id);
        }
        
        public System.Threading.Tasks.Task<bool> sendAsync(int id) {
            return base.Channel.sendAsync(id);
        }
    }
}
